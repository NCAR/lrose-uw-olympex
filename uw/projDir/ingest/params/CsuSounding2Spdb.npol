/**********************************************************************
 * TDRP params for CsuSounding2Spdb
 **********************************************************************/

//======================================================================
//
// CsuSounding2Spdb reads sounding data from Colorado State University, 
//   converts it to sounding format and writes them to an SPDB data base.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "npol";

//======================================================================
//
// PROGRAM MODES OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for a new input file. In this 
//   mode it is optional to watch for a latest_data_info file. In ARCHIVE 
//   mode, it processes all of the data files in the input directory 
//   between the start and end times set on the command line. In FILELIST 
//   mode, it processes all of the files in the list specified on the 
//   command line. In FILELIST mode paths must be fully qualified with 
//   respect to the date and time - so if each date has a separate 
//   subdirectory the date part of the path must be included.
//
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT DETAILS.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Input directory.
//
// Directory where input data files can be found.
//
//
// Type: string
//

input_dir = "$(DATA_DIR)/$(project)/raw/soundings/csu";

///////////// latest_data_info_avail //////////////////
//
// Set to true if there is a latest_data_info file available in the 
//   input directory.
//
// REALTIME mode only.
//
//
// Type: boolean
//

latest_data_info_avail = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
//
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
//
// Minimum val: 1
//
// Type: int
//

max_realtime_valid_age = 86400;

///////////// strict_subdir_check /////////////////////
//
// When set, only checks input_dir for subdirs of the form YYYYMMDD.
//
// Only in REALTIME mode with latest_data_info_avail FALSE.
//
//
// Type: boolean
//

strict_subdir_check = FALSE;

///////////// file_name_check /////////////////////////
//
// When set, check file name contains specified sub-string.
//
// See file_match_string.
//
//
// Type: boolean
//

file_name_check = FALSE;

///////////// file_match_string ///////////////////////
//
// Input filename match string.
//
// Files must contain this string to be processed.
//
//
// Type: string
//

file_match_string = "txt";

//======================================================================
//
// LAUNCH LOCATION.
//
//======================================================================
 
///////////// launch_latitude_deg /////////////////////
//
// Latitude of launch point (deg).
//
// If latitude is included in the data, that value will be used instead, 
//   provided get_location_from_data is set to TRUE.
//
//
// Type: double
//

launch_latitude_deg = 47.2755;

///////////// launch_longitude_deg ////////////////////
//
// Longitude of launch point (deg).
//
// If longitude is included in the data, that value will be used 
//   instead, provided get_location_from_data is set to TRUE.
//
//
// Type: double
//

launch_longitude_deg = -124.209;

///////////// launch_altitude_m ///////////////////////
//
// Altitude of launch point (meters).
//
// If altitude is included in the data, that value will be used instead, 
//   provided get_location_from_data is set to TRUE.
//
//
// Type: double
//

launch_altitude_m = 139;

///////////// get_location_from_data //////////////////
//
// If TRUE, launch location will be overridded from the data, if 
//   possible.
//
//
// Type: boolean
//

get_location_from_data = FALSE;

//======================================================================
//
// DATA OUTPUT DETAILS.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL for decoded soundings.
//
// See the DIDSS docs for details on URL usage.
//
//
// Type: string
//

output_url = "$(DATA_DIR)/$(project)/spdb/soundings/csu";

///////////// expire_seconds //////////////////////////
//
// Expire time in seconds for each sounding.
//
// This value will be added to the sounding time to determine the expire 
//   time for the metar.
//
//
// Type: int
//

expire_seconds = 43200;

